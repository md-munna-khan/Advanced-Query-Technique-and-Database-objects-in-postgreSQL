/*
                    @Procedural Approach:
    1. Language Support: Supports procedural languages like PL/pgSQL, PL/Perl, PL/Python, etc.
    2. Complex Logic: Allows for complex logic using control structures like loops, conditionals, and exception handling.
    3. Variable Support: Supports variable declarations and manipulation within the procedural code.
    4. Stored Procedures/Functions: Provides the ability to create stored procedures or functions, 

                    @Non-Procedural Approach:
    1. Declarative Queries: Focuses on writing declarative SQL queries to retrieve, insert, update, or delete data from the database.
    2. Simplicity: Emphasizes simplicity by expressing operations in terms of what data is needed.
    3. SQL Functions: Supports SQL functions, which are single SQL statements that return a value or set of values.
    4. Performance: Can sometimes offer better performance for simple operations due to the optimized query execution plans generated by the database engine.
*/
SELECT count(*) FROM employees;

-- create function
CREATE or REPLACE Function emp_count()
RETURNS INT
LANGUAGE SQL
as 
$$
SELECT count(*) from employees
$$;

SELECT emp_count()

-- delete function
CREATE or REPLACE Function delete_emp()
RETURNS void
LANGUAGE SQL
as 
$$
DELETE FROM employees where employee_id=30
$$;
SELECT delete_emp();


--- send peramter and delete it 

CREATE or REPLACE Function delete_emp_by_id(p_by_id INT)
RETURNS void
LANGUAGE SQL
as 
$$
DELETE FROM employees where employee_id=(p_by_id);

$$;
SELECT delete_emp_by_id(27);
SELECT * from employees;

--- use procedure
CREATE Procedure remove_emp()
LANGUAGE plpgsql
as 
$$
DECLARE
test_var int;
BEGIN
SELECT employee_id INTO test_var from employees WHERE employee_id=25;
DELETE from employees WHERE employee_id= test_var ;
end
$$;


CALL remove_emp()

CREATE Procedure remove_emp_id(P_remove_id int)
LANGUAGE plpgsql
as 
$$
DECLARE
test_var int;
BEGIN
SELECT employee_id INTO test_var from employees WHERE employee_id= P_remove_id;
DELETE from employees WHERE employee_id= test_var ;
end
$$;

DROP PROCEDURE remove_emp_id;
CALL remove_emp_id(20); 
